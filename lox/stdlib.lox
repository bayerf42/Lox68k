// little endian, 4 byte aligned struct, suitable for Windows (tcc -m32) and Linux (gcc -m32)
fun word_peek(ad)    -> bit_or(bit_shift(peek(ad + 1), 8), peek(ad))
fun long_peek(ad)    -> bit_or(bit_shift(word_peek(ad + 2), 16), word_peek(ad))
fun fun_name(clo)    -> heap(addr(heap(addr(clo) + 8)) + 36)
fun class_name(cls)  -> heap(addr(cls) + 8)
fun class_of(ins)    -> heap(addr(ins) + 8)
fun native_addr(nat) -> long_peek(addr(nat) + 12)

var pi = 3.1415926535897932384626433;

fun asin(x)  -> 2 * atan(x / (1 + sqrt(1-x*x)))
fun acos(x)  -> pi/2 - asin(x)
fun asinh(x) -> log(x + sqrt(x*x + 1))
fun acosh(x) -> log(x + sqrt(x*x - 1))
fun atanh(x) -> 0.5 * log((1+x)/(1-x))

fun radians(deg) -> pi/180*deg

fun fmod(a, b) {
  var q = a/b;
  return b * (q-trunc(q));
}

fun max(a,b) {
  if (a>b) return a; else return b;
}

fun min(a,b) {
  if (a<b) return a; else return b;
}

fun map(fn, list) {
  var len = length(list);
  var res = [];
  for (var i = 0; i < len; i = i + 1)
    append(res, fn(list[i]));
  return res;
}

fun filter(fn, list) {
  var len = length(list);
  var res = [];
  for (var i = 0; i < len; i = i + 1)
    if (fn(list[i]))
      append(res, list[i]);
  return res;
}

fun complement(fn) -> fun (x) -> !fn(x)

fun reduce(fn, list) {
  var len = length(list);
  if (len == 0) return nil;
  if (len == 1) return list[0];
  var res = fn(list[0], list[1]);
  for (var i = 2; i < len; i = i + 1)
    res = fn(res, list[i]);
  return res;
}

fun string(obj) {
  var oty = type(obj);
  if      (obj == nil) return "nil";
  else if (obj == true) return "true";
  else if (obj == false) return "false";
  else if (oty == "int") return dec(obj);
  else if (oty == "real") return dec(obj);
  else if (oty == "string") return obj;
  else if (oty == "list") {
    var sep = "";
    var res = "["; 
    var len = length(obj);
    for (var i = 0; i < len; i = i + 1) {	
      res = res + (sep + string(obj[i]));
      sep = ", ";
    }
    return res + "]";
  }
  else if (oty == "instance") return obj.string();
  else if (oty == "closure") return "<closure " + fun_name(obj) + ">";
  else if (oty == "native") return "<native " + hex(native_addr(obj)) + ">";
  else if (oty == "class") return "<class " + class_name(obj) + ">";
  else if (oty == "bound") return "<bound>";
  else if (oty == "iterator") return "<iterator>";
  else return "<unknown>";
}

fun _build_hash(hash, formatter) {
  var sep = "";
  var res = "";
  for (var it = slots(hash); valid(it); next(it)) {
    res = res + (sep + formatter(it));
    sep = ", ";
  }
  return res;
}

class Object {
  init() {}

  string() -> "<" + class_name(class_of(this)) + " instance: " 
            + _build_hash(this, fun (it) -> string(it@) + ":" + string(it^)) + ">" 

  clone() {
    var res = class_of(this)();
    for (var it = slots(this); valid(it); next(it))
      res[it@] = it^;
    return res;
  }  
}

class Map < Object {
  init(..args) {
    super.init();
    var len = length(args);
    if (bit_and(1, len) == 1) error("Map init list must have even length.");
    for (var i = 0; i < len; i = i + 2)
      this[args[i]] = args[i + 1];
  }

  string() -> "{" + _build_hash(this, fun (it) -> string(it@) + ":" + string(it^)) + "}"
}

class Set < Object {
  init(..args) {
    super.init();
    for (var i = 0; i < length(args); i = i + 1)
      this[args[i]] = true;
  }

  string() -> "{" + _build_hash(this, fun (it) -> string(it@)) + "}"

  union(that) {
    for (var it = slots(that); valid(it); next(it))
      this[it@] = true;
    return this;
  }

  intersect(that) {
    for (var it = slots(this); valid(it); next(it))
      if (!that[it@])
        remove(this, it@);
    return this;
  }

  subtract(that) {
    for (var it = slots(that); valid(it); next(it))
      remove(this, it@);
    return this;
  }
}

fun list_globals() {
  for (var it = globals(); valid(it); next(it))
    print it@, " - ", it^;
}
