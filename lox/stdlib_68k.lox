fun peekw(ad)->bit_or(bit_shift(peek(ad),8),peek(ad+1))
fun peekl(ad)->bit_or(bit_shift(peekw(ad),16),peekw(ad+2))
fun class_of(ins) {if (type(ins)=="instance") return heap(addr(ins)+6);}
fun pokew(ad,v) {
 poke(ad+1,bit_and(v,$ff));
 poke(ad,bit_and(bit_shift(v,-8),$ff));
}
fun pokel(ad,v) {
 pokew(ad+2,bit_and(v,$ffff));
 pokew(ad,bit_and(bit_shift(v,-16),$ffff));
}
var pi=3.14159265;
fun asin(x)->2*atan(x/(1+sqrt(1-x*x)))
fun acos(x)->pi/2-asin(x)
fun asinh(x)->log(x+sqrt(x*x+1))
fun acosh(x)->log(x+sqrt(x*x-1))
fun atanh(x)->0.5*log((1+x)/(1-x))
fun rad(x)->pi/180*x
fun deg(x)->180/pi*x
fun fmod(a,b) {
 var q=(a+0.0)/b;
 return b*(q-trunc(q));
}
fun max(a,b) {
 if (a>b) return a; else return b;
}
fun min(a,b) {
 if (a<b) return a; else return b;
}
fun map(fn,lst) {
 var len=length(lst);
 var res=list(len);
 for (var i=0;i<len;i=i+1)
  res[i]=fn(lst[i]);
 return res;
}
fun filter(fn,lst) {
 var len=length(lst);
 var res=[];
 for (var i=0;i<len;i=i+1)
  if (fn(lst[i]))
   append(res,lst[i]);
 return res;
}
fun complement(fn)->fun(x)->!fn(x)
fun reduce(fn,lst) {
 var len=length(lst);
 if (len==0) return nil;
 if (len==1) return lst[0];
 var res=fn(lst[0],lst[1]);
 for (var i=2;i<len; i=i+1)
  res=fn(res,lst[i]);
 return res;
}
fun string(obj) {
 case (obj) {
  when nil:return "nil";
  when true:return "true";
  when false:return "false";
 }
 case(type(obj)) {
  when "int","real":return dec(obj);
  when "string":return obj;
  when "list":return join(map(string,obj),", ","[","]");
  when "instance":return obj.string();
  when "closure","native","class","bound":return "<"+type(obj)+" "+name(obj)+">";
  when "iterator":return "<iterator>";
  else return "<unknown>";
 }
}
fun _bh(h,fmt) {
 var res=[];
 for (var it=slots(h);valid(it);next(it))
  append(res,fmt(it));
 return res;
}
class Object {
 string()->join(_bh(this,fun(it)->string(it@)+":"+string(it^)),", ","<"+name(class_of(this))+" instance: ",">") 
 clone() {
  var res=class_of(this)();
  for (var it=slots(this);valid(it);next(it))
   res[it@]=it^;
  return res;
 }  
}
class Map<Object {
 init(..args) {
  var len=length(args);
  if (bit_and(1,len)==1) error("Map init list must have even length.");
  for (var i=0;i<len;i=i+2)
   this[args[i]]=args[i+1];
 }
 string()->join(_bh(this,fun(it)->string(it@)+":"+string(it^)),", ","{","}")
}
class Set<Object {
 init(..args) {
  for (var i=0;i<length(args);i=i+1)
   this[args[i]]=true;
 }
 string()->join(_bh(this,fun(it)->string(it@)),", ","{","}")
 union(that) {
  for (var it=slots(that);valid(it);next(it))
   this[it@]=true;
  return this;
 }
 intersect(that) {
  for (var it=slots(this);valid(it);next(it))
   if (!that[it@])
    remove(this,it@);
  return this;
 }
 subtract(that) {
  for (var it=slots(that);valid(it);next(it))
   remove(this,it@);
  return this;
 }
}
fun list_globals() {
 for (var it=globals();valid(it);next(it))
  print it@," - ",it^;
}
